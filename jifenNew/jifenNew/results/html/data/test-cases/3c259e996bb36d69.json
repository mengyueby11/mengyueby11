{"uid":"3c259e996bb36d69","name":"test_addIntegral","fullName":"test_case.test_integral.TestIntegralMge#test_addIntegral","historyId":"da6401900f2d3cab8a623fbb7a58c7a5","time":{"start":1657242487117,"stop":1657242487118,"duration":1},"status":"broken","statusMessage":"TypeError: Object of type 'TestIntegralMge' is not JSON serializable","statusTrace":"test_user = <test_case.test_integral.TestIntegralMge object at 0x000001B6C23FAC88>\n\n    def test_addIntegral(test_user):\n        # a=self.test_user()\n        nowtime=time.strftime('%Y%m%d%H%M%S',time.localtime())\n        print(nowtime)\n        all_url = test_url + readCSV().get_csv('testdata.csv', 'r')[3][2] +nowtime+'?'+ token  # 接口拼接\n        print(all_url)\n        jsondata=[{\"applyIntegral\":13,\"applyNum\":1,\"applyUnit\":\"13/小时\",\"approvalId\":\"\",\"deptId\":test_user,\"dimensionId\":3,\"informantId\":\"20192\",\"remark\":\"\",\"standardId\":1530}]\n>       test_01=requests.post(url=all_url,json=jsondata).json()\n\n..\\test_case\\test_integral.py:49: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\venv\\lib\\site-packages\\requests\\api.py:117: in post\n    return request('post', url, data=data, json=json, **kwargs)\n..\\venv\\lib\\site-packages\\requests\\api.py:61: in request\n    return session.request(method=method, url=url, **kwargs)\n..\\venv\\lib\\site-packages\\requests\\sessions.py:515: in request\n    prep = self.prepare_request(req)\n..\\venv\\lib\\site-packages\\requests\\sessions.py:453: in prepare_request\n    hooks=merge_hooks(request.hooks, self.hooks),\n..\\venv\\lib\\site-packages\\requests\\models.py:321: in prepare\n    self.prepare_body(data, files, json)\n..\\venv\\lib\\site-packages\\requests\\models.py:473: in prepare_body\n    body = complexjson.dumps(json, allow_nan=False)\n..\\..\\python3.6\\lib\\json\\__init__.py:238: in dumps\n    **kw).encode(obj)\n..\\..\\python3.6\\lib\\json\\encoder.py:199: in encode\n    chunks = self.iterencode(o, _one_shot=True)\n..\\..\\python3.6\\lib\\json\\encoder.py:257: in iterencode\n    return _iterencode(o, 0)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <json.encoder.JSONEncoder object at 0x000001B6C2546198>\no = <test_case.test_integral.TestIntegralMge object at 0x000001B6C23FAC88>\n\n    def default(self, o):\n        \"\"\"Implement this method in a subclass such that it returns\n        a serializable object for ``o``, or calls the base implementation\n        (to raise a ``TypeError``).\n    \n        For example, to support arbitrary iterators, you could\n        implement default like this::\n    \n            def default(self, o):\n                try:\n                    iterable = iter(o)\n                except TypeError:\n                    pass\n                else:\n                    return list(iterable)\n                # Let the base class default method raise the TypeError\n                return JSONEncoder.default(self, o)\n    \n        \"\"\"\n        raise TypeError(\"Object of type '%s' is not JSON serializable\" %\n>                       o.__class__.__name__)\nE       TypeError: Object of type 'TestIntegralMge' is not JSON serializable\n\n..\\..\\python3.6\\lib\\json\\encoder.py:180: TypeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[],"afterStages":[],"labels":[{"name":"parentSuite","value":"test_case"},{"name":"suite","value":"test_integral"},{"name":"subSuite","value":"TestIntegralMge"},{"name":"host","value":"PC-202104061359"},{"name":"thread","value":"29152-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"test_case.test_integral"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":[]},"source":"3c259e996bb36d69.json","parameterValues":[]}